attacker[active]
// attacker[passive]

// sign+verif
principal s2[]
principal s1[
	knows private key
	knows public text1
	knows private text2

	ss1 = SIGN(key, text1)
	ss2 = SIGN(key, text2)

	_ = SIGNVERIF(G^key, text1, ss1)?
	_ = SIGNVERIF(G^key, text2, ss2)?
	_ = ASSERT(nil, SIGNVERIF(G^key, text1, ss1))?
	_ = ASSERT(nil, SIGNVERIF(G^key, text2, ss2))?
]
s1 -> s2: ss1, [ss2]
principal s2[
	knows private key
	knows public text1
	knows private text2

	_ = SIGNVERIF(G^key, text1, ss1)?
	_ = SIGNVERIF(G^key, text2, ss2)?
]
// end sign+verif

// ring+verif
principal r1[
	generates a,b,c
	knows private t

	s1 = RINGSIGN(a, G^b, G^c, t)
	_ = RINGSIGNVERIF(G^a, G^b, G^c, t, s1)?
	_ = RINGSIGNVERIF(G^a, G^c, G^b, t, s1)?
	_ = RINGSIGNVERIF(G^c, G^a, G^b, t, s1)?
	_ = RINGSIGNVERIF(G^c, G^b, G^a, t, s1)?
	_ = RINGSIGNVERIF(G^b, G^c, G^a, t, s1)?
	_ = RINGSIGNVERIF(G^b, G^a, G^c, t, s1)?
]
// end ring+verif

queries []
